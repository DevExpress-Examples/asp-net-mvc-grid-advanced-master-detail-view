'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
	Imports System.Data.Linq
	Imports System.Data.Linq.Mapping
	Imports System.Data
	Imports System.Collections.Generic
	Imports System.Reflection
	Imports System.Linq
	Imports System.Linq.Expressions
	Imports System.ComponentModel
	Imports System
	Imports System.ComponentModel.DataAnnotations
	Imports DevExpress.Web.Mvc
	Imports DevExpress.Web.ASPxEditors
Namespace AdvancedMasterDetail.Models


	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="northwnd")> _
	Partial Public Class NorthwindClassesDataContext
		Inherits System.Data.Linq.DataContext

		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub InsertSupplier(ByVal instance As Supplier)
	End Sub
	Partial Private Sub UpdateSupplier(ByVal instance As Supplier)
	End Sub
	Partial Private Sub DeleteSupplier(ByVal instance As Supplier)
	End Sub
	Partial Private Sub InsertProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub UpdateProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub DeleteProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub InsertCategory(ByVal instance As Category)
	End Sub
	Partial Private Sub UpdateCategory(ByVal instance As Category)
	End Sub
	Partial Private Sub DeleteCategory(ByVal instance As Category)
	End Sub
	Partial Private Sub InsertOrder_Detail(ByVal instance As Order_Detail)
	End Sub
	Partial Private Sub UpdateOrder_Detail(ByVal instance As Order_Detail)
	End Sub
	Partial Private Sub DeleteOrder_Detail(ByVal instance As Order_Detail)
	End Sub
	#End Region

		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("northwndConnectionString").ConnectionString, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public ReadOnly Property Suppliers() As System.Data.Linq.Table(Of Supplier)
			Get
				Return Me.GetTable(Of Supplier)()
			End Get
		End Property

		Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
			Get
				Return Me.GetTable(Of Product)()
			End Get
		End Property

		Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Category)
			Get
				Return Me.GetTable(Of Category)()
			End Get
		End Property

		Public ReadOnly Property Order_Details() As System.Data.Linq.Table(Of Order_Detail)
			Get
				Return Me.GetTable(Of Order_Detail)()
			End Get
		End Property
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Suppliers")> _
	Partial Public Class Supplier
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _SupplierID As Integer

		Private _CompanyName As String

		Private _ContactName As String

		Private _ContactTitle As String

		Private _Address As String

		Private _City As String

		Private _Region As String

		Private _PostalCode As String

		Private _Country As String

		Private _Phone As String

		Private _Fax As String

		Private _HomePage As String

		Private _Products As EntitySet(Of Product)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnSupplierIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnSupplierIDChanged()
	End Sub
	Partial Private Sub OnCompanyNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCompanyNameChanged()
	End Sub
	Partial Private Sub OnContactNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnContactNameChanged()
	End Sub
	Partial Private Sub OnContactTitleChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnContactTitleChanged()
	End Sub
	Partial Private Sub OnAddressChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnAddressChanged()
	End Sub
	Partial Private Sub OnCityChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCityChanged()
	End Sub
	Partial Private Sub OnRegionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnRegionChanged()
	End Sub
	Partial Private Sub OnPostalCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPostalCodeChanged()
	End Sub
	Partial Private Sub OnCountryChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCountryChanged()
	End Sub
	Partial Private Sub OnPhoneChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPhoneChanged()
	End Sub
	Partial Private Sub OnFaxChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnFaxChanged()
	End Sub
	Partial Private Sub OnHomePageChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnHomePageChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Products = New EntitySet(Of Product)(New Action(Of Product)(AddressOf Me.attach_Products), New Action(Of Product)(AddressOf Me.detach_Products))
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property SupplierID() As Integer
			Get
				Return Me._SupplierID
			End Get
			Set(ByVal value As Integer)
				If (Me._SupplierID <> value) Then
					Me.OnSupplierIDChanging(value)
					Me.SendPropertyChanging()
					Me._SupplierID = value
					Me.SendPropertyChanged("SupplierID")
					Me.OnSupplierIDChanged()
				End If
			End Set
		End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
        <Required(ErrorMessage:="Company Name is empty")> _
        Public Property CompanyName() As String
            Get
                Return Me._CompanyName
            End Get
            Set(ByVal value As String)
                If (Me._CompanyName <> value) Then
                    Me.OnCompanyNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._CompanyName = value
                    Me.SendPropertyChanged("CompanyName")
                    Me.OnCompanyNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="NVarChar(30)")>
        <Required(ErrorMessage:="Contact Name is empty")> _
        Public Property ContactName() As String
            Get
                Return Me._ContactName
            End Get
            Set(ByVal value As String)
                If (Me._ContactName <> value) Then
                    Me.OnContactNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._ContactName = value
                    Me.SendPropertyChanged("ContactName")
                    Me.OnContactNameChanged()
                End If
            End Set
        End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactTitle", DbType:="NVarChar(30)")> _
		Public Property ContactTitle() As String
			Get
				Return Me._ContactTitle
			End Get
			Set(ByVal value As String)
				If (Me._ContactTitle <> value) Then
					Me.OnContactTitleChanging(value)
					Me.SendPropertyChanging()
					Me._ContactTitle = value
					Me.SendPropertyChanged("ContactTitle")
					Me.OnContactTitleChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(60)")> _
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set(ByVal value As String)
				If (Me._Address <> value) Then
					Me.OnAddressChanging(value)
					Me.SendPropertyChanging()
					Me._Address = value
					Me.SendPropertyChanged("Address")
					Me.OnAddressChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(15)")> _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging()
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="NVarChar(15)")> _
		Public Property Region() As String
			Get
				Return Me._Region
			End Get
			Set(ByVal value As String)
				If (Me._Region <> value) Then
					Me.OnRegionChanging(value)
					Me.SendPropertyChanging()
					Me._Region = value
					Me.SendPropertyChanged("Region")
					Me.OnRegionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(10)")> _
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set(ByVal value As String)
				If (Me._PostalCode <> value) Then
					Me.OnPostalCodeChanging(value)
					Me.SendPropertyChanging()
					Me._PostalCode = value
					Me.SendPropertyChanged("PostalCode")
					Me.OnPostalCodeChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(15)")> _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging()
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(24)"), Mask("+1 (999) 000-0000", IncludeLiterals := MaskIncludeLiteralsMode.DecimalSymbol, PromptChar := "_"c, ErrorMessage := "Phone number is invalid")> _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set(ByVal value As String)
				If (Me._Phone <> value) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging()
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(24)")> _
		Public Property Fax() As String
			Get
				Return Me._Fax
			End Get
			Set(ByVal value As String)
				If (Me._Fax <> value) Then
					Me.OnFaxChanging(value)
					Me.SendPropertyChanging()
					Me._Fax = value
					Me.SendPropertyChanged("Fax")
					Me.OnFaxChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HomePage", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property HomePage() As String
			Get
				Return Me._HomePage
			End Get
			Set(ByVal value As String)
				If (Me._HomePage <> value) Then
					Me.OnHomePageChanging(value)
					Me.SendPropertyChanging()
					Me._HomePage = value
					Me.SendPropertyChanged("HomePage")
					Me.OnHomePageChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_Product", Storage:="_Products", ThisKey:="SupplierID", OtherKey:="SupplierID")> _
		Public Property Products() As EntitySet(Of Product)
			Get
				Return Me._Products
			End Get
			Set(ByVal value As EntitySet(Of Product))
				Me._Products.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.Supplier = Me
		End Sub

		Private Sub detach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.Supplier = Nothing
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Products")> _
	Partial Public Class Product
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ProductID As Integer

		Private _ProductName As String

		Private _SupplierID? As Integer

		Private _CategoryID? As Integer

		Private _QuantityPerUnit As String

		Private _UnitPrice? As Decimal

		Private _UnitsInStock? As Short

		Private _UnitsOnOrder? As Short

		Private _ReorderLevel? As Short

		Private _Discontinued As Boolean

		Private _Order_Details As EntitySet(Of Order_Detail)

		Private _Supplier As EntityRef(Of Supplier)

		Private _Category As EntityRef(Of Category)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnProductNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnProductNameChanged()
	End Sub
	Partial Private Sub OnSupplierIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnSupplierIDChanged()
	End Sub
	Partial Private Sub OnCategoryIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnCategoryIDChanged()
	End Sub
	Partial Private Sub OnQuantityPerUnitChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnQuantityPerUnitChanged()
	End Sub
	Partial Private Sub OnUnitPriceChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnUnitPriceChanged()
	End Sub
	Partial Private Sub OnUnitsInStockChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnUnitsInStockChanged()
	End Sub
	Partial Private Sub OnUnitsOnOrderChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnUnitsOnOrderChanged()
	End Sub
	Partial Private Sub OnReorderLevelChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnReorderLevelChanged()
	End Sub
	Partial Private Sub OnDiscontinuedChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnDiscontinuedChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Order_Details = New EntitySet(Of Order_Detail)(New Action(Of Order_Detail)(AddressOf Me.attach_Order_Details), New Action(Of Order_Detail)(AddressOf Me.detach_Order_Details))
			Me._Supplier = Nothing
			Me._Category = Nothing
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged()
				End If
			End Set
		End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
        <Required(ErrorMessage:="Product Name is required")> _
        Public Property ProductName() As String
            Get
                Return Me._ProductName
            End Get
            Set(ByVal value As String)
                If (Me._ProductName <> value) Then
                    Me.OnProductNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductName = value
                    Me.SendPropertyChanged("ProductName")
                    Me.OnProductNameChanged()
                End If
            End Set
        End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierID", DbType:="Int")> _
		Public Property SupplierID() As Integer?
			Get
				Return Me._SupplierID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._SupplierID.Equals(value)) Then
					If Me._Supplier.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSupplierIDChanging(value)
					Me.SendPropertyChanging()
					Me._SupplierID = value
					Me.SendPropertyChanged("SupplierID")
					Me.OnSupplierIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int")> _
		Public Property CategoryID() As Integer?
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._CategoryID.Equals(value)) Then
					If Me._Category.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuantityPerUnit", DbType:="NVarChar(20)")> _
		Public Property QuantityPerUnit() As String
			Get
				Return Me._QuantityPerUnit
			End Get
			Set(ByVal value As String)
				If (Me._QuantityPerUnit <> value) Then
					Me.OnQuantityPerUnitChanging(value)
					Me.SendPropertyChanging()
					Me._QuantityPerUnit = value
					Me.SendPropertyChanged("QuantityPerUnit")
					Me.OnQuantityPerUnitChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Money")> _
		Public Property UnitPrice() As Decimal?
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._UnitPrice.Equals(value)) Then
					Me.OnUnitPriceChanging(value)
					Me.SendPropertyChanging()
					Me._UnitPrice = value
					Me.SendPropertyChanged("UnitPrice")
					Me.OnUnitPriceChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsInStock", DbType:="SmallInt")> _
		Public Property UnitsInStock() As Short?
			Get
				Return Me._UnitsInStock
			End Get
			Set(ByVal value? As Short)
				If (Not Me._UnitsInStock.Equals(value)) Then
					Me.OnUnitsInStockChanging(value)
					Me.SendPropertyChanging()
					Me._UnitsInStock = value
					Me.SendPropertyChanged("UnitsInStock")
					Me.OnUnitsInStockChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsOnOrder", DbType:="SmallInt")> _
		Public Property UnitsOnOrder() As Short?
			Get
				Return Me._UnitsOnOrder
			End Get
			Set(ByVal value? As Short)
				If (Not Me._UnitsOnOrder.Equals(value)) Then
					Me.OnUnitsOnOrderChanging(value)
					Me.SendPropertyChanging()
					Me._UnitsOnOrder = value
					Me.SendPropertyChanged("UnitsOnOrder")
					Me.OnUnitsOnOrderChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReorderLevel", DbType:="SmallInt")> _
		Public Property ReorderLevel() As Short?
			Get
				Return Me._ReorderLevel
			End Get
			Set(ByVal value? As Short)
				If (Not Me._ReorderLevel.Equals(value)) Then
					Me.OnReorderLevelChanging(value)
					Me.SendPropertyChanging()
					Me._ReorderLevel = value
					Me.SendPropertyChanged("ReorderLevel")
					Me.OnReorderLevelChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discontinued", DbType:="Bit NOT NULL")> _
		Public Property Discontinued() As Boolean
			Get
				Return Me._Discontinued
			End Get
			Set(ByVal value As Boolean)
				If (Me._Discontinued <> value) Then
					Me.OnDiscontinuedChanging(value)
					Me.SendPropertyChanging()
					Me._Discontinued = value
					Me.SendPropertyChanged("Discontinued")
					Me.OnDiscontinuedChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Order_Detail", Storage:="_Order_Details", ThisKey:="ProductID", OtherKey:="ProductID")> _
		Public Property Order_Details() As EntitySet(Of Order_Detail)
			Get
				Return Me._Order_Details
			End Get
			Set(ByVal value As EntitySet(Of Order_Detail))
				Me._Order_Details.Assign(value)
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_Product", Storage:="_Supplier", ThisKey:="SupplierID", OtherKey:="SupplierID", IsForeignKey:=True)> _
		Public Property Supplier() As Supplier
			Get
				Return Me._Supplier.Entity
			End Get
			Set(ByVal value As Supplier)
				Dim previousValue As Supplier = Me._Supplier.Entity
				If ((previousValue IsNot value) OrElse (Me._Supplier.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Supplier.Entity = Nothing
						previousValue.Products.Remove(Me)
					End If
					Me._Supplier.Entity = value
					If (value IsNot Nothing) Then
						value.Products.Add(Me)
						Me._SupplierID = value.SupplierID
					Else
						Me._SupplierID = Nothing
					End If
					Me.SendPropertyChanged("Supplier")
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Product", Storage:="_Category", ThisKey:="CategoryID", OtherKey:="CategoryID", IsForeignKey:=True)> _
		Public Property Category() As Category
			Get
				Return Me._Category.Entity
			End Get
			Set(ByVal value As Category)
				Dim previousValue As Category = Me._Category.Entity
				If ((previousValue IsNot value) OrElse (Me._Category.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Category.Entity = Nothing
						previousValue.Products.Remove(Me)
					End If
					Me._Category.Entity = value
					If (value IsNot Nothing) Then
						value.Products.Add(Me)
						Me._CategoryID = value.CategoryID
					Else
						Me._CategoryID = Nothing
					End If
					Me.SendPropertyChanged("Category")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_Order_Details(ByVal entity As Order_Detail)
			Me.SendPropertyChanging()
			entity.Product = Me
		End Sub

		Private Sub detach_Order_Details(ByVal entity As Order_Detail)
			Me.SendPropertyChanging()
			entity.Product = Nothing
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Categories")> _
	Partial Public Class Category
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _CategoryID As Integer

		Private _CategoryName As String

		Private _Description As String

		Private _Picture As System.Data.Linq.Binary

		Private _Products As EntitySet(Of Product)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCategoryIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnCategoryIDChanged()
	End Sub
	Partial Private Sub OnCategoryNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCategoryNameChanged()
	End Sub
	Partial Private Sub OnDescriptionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnDescriptionChanged()
	End Sub
	Partial Private Sub OnPictureChanging(ByVal value As System.Data.Linq.Binary)
	End Sub
	Partial Private Sub OnPictureChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Products = New EntitySet(Of Product)(New Action(Of Product)(AddressOf Me.attach_Products), New Action(Of Product)(AddressOf Me.detach_Products))
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property CategoryID() As Integer
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value As Integer)
				If (Me._CategoryID <> value) Then
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="NVarChar(15)")> _
		Public Property CategoryName() As String
			Get
				Return Me._CategoryName
			End Get
			Set(ByVal value As String)
				If (Me._CategoryName <> value) Then
					Me.OnCategoryNameChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryName = value
					Me.SendPropertyChanged("CategoryName")
					Me.OnCategoryNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set(ByVal value As String)
				If (Me._Description <> value) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging()
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Picture", DbType:="Image", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Picture() As System.Data.Linq.Binary
			Get
				Return Me._Picture
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._Picture IsNot value) Then
					Me.OnPictureChanging(value)
					Me.SendPropertyChanging()
					Me._Picture = value
					Me.SendPropertyChanged("Picture")
					Me.OnPictureChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Product", Storage:="_Products", ThisKey:="CategoryID", OtherKey:="CategoryID")> _
		Public Property Products() As EntitySet(Of Product)
			Get
				Return Me._Products
			End Get
			Set(ByVal value As EntitySet(Of Product))
				Me._Products.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.Category = Me
		End Sub

		Private Sub detach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.Category = Nothing
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Order Details]")> _
	Partial Public Class Order_Detail
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _OrderID As Integer

		Private _ProductID As Integer

		Private _UnitPrice As Decimal

		Private _Quantity As Short

		Private _Discount As Single

		Private _Product As EntityRef(Of Product)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnOrderIDChanged()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnUnitPriceChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnUnitPriceChanged()
	End Sub
	Partial Private Sub OnQuantityChanging(ByVal value As Short)
	End Sub
	Partial Private Sub OnQuantityChanged()
	End Sub
	Partial Private Sub OnDiscountChanging(ByVal value As Single)
	End Sub
	Partial Private Sub OnDiscountChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Product = Nothing
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._OrderID <> value) Then
					Me.OnOrderIDChanging(value)
					Me.SendPropertyChanging()
					Me._OrderID = value
					Me.SendPropertyChanged("OrderID")
					Me.OnOrderIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged()
				End If
			End Set
		End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Money NOT NULL")>
        <Required(ErrorMessage:="Price is required"), Range(1, 100000, ErrorMessage:="Must be between 1 and 100 000")> _
        Public Property UnitPrice() As Decimal
            Get
                Return Me._UnitPrice
            End Get
            Set(ByVal value As Decimal)
                If (Me._UnitPrice <> value) Then
                    Me.OnUnitPriceChanging(value)
                    Me.SendPropertyChanging()
                    Me._UnitPrice = value
                    Me.SendPropertyChanged("UnitPrice")
                    Me.OnUnitPriceChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="SmallInt NOT NULL")>
        <Required(ErrorMessage:="Quantity is required"), Range(1, 100, ErrorMessage:="Must be between 1 and 100 ")> _
        Public Property Quantity() As Short
            Get
                Return Me._Quantity
            End Get
            Set(ByVal value As Short)
                If (Me._Quantity <> value) Then
                    Me.OnQuantityChanging(value)
                    Me.SendPropertyChanging()
                    Me._Quantity = value
                    Me.SendPropertyChanged("Quantity")
                    Me.OnQuantityChanged()
                End If
            End Set
        End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="Real NOT NULL")> _
		Public Property Discount() As Single
			Get
				Return Me._Discount
			End Get
			Set(ByVal value As Single)
				If (Me._Discount <> value) Then
					Me.OnDiscountChanging(value)
					Me.SendPropertyChanging()
					Me._Discount = value
					Me.SendPropertyChanged("Discount")
					Me.OnDiscountChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Order_Detail", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=True)> _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set(ByVal value As Product)
				Dim previousValue As Product = Me._Product.Entity
				If ((previousValue IsNot value) OrElse (Me._Product.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Product.Entity = Nothing
						previousValue.Order_Details.Remove(Me)
					End If
					Me._Product.Entity = value
					If (value IsNot Nothing) Then
						value.Order_Details.Add(Me)
						Me._ProductID = value.ProductID
					Else
						Me._ProductID = Nothing
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
